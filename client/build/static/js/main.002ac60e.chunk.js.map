{"version":3,"sources":["logo.svg","components/DeleteBtn/index.js","components/Jumbotron/index.js","utils/API.js","components/Grid/index.js","components/List/index.js","components/Form/index.js","pages/Books.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeleteBtn","props","className","role","tabIndex","Jumbotron","children","style","height","clear","paddingTop","textAlign","getBooks","axios","get","getBook","id","deleteBook","delete","saveBook","bookData","post","Container","fluid","Row","Col","size","split","map","join","List","ListItem","Input","TextArea","rows","FormBtn","float","marginBottom","Books","state","books","title","author","synopsis","search","loadBooks","API","then","res","setState","data","console","log","catch","err","handleInputChange","event","preventDefault","target","value","handleFormSubmit","results","error","message","this","onChange","name","placeholder","onClick","length","book","key","_id","to","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.002ac60e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      âœ—\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import {} from \"dotenv/config\";\nimport axios from \"axios\";\n\n\nexport default {\n\n  // Gets all books\n  getBooks: function() {\n    \n    return axios.get(\"/api/books\");\n  },\n  // Gets the book with the given id\n  getBook: function(id) {\n    return axios.get(\"/api/books/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"20\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nclass Books extends Component {\n  state = {\n    books: [],\n    title: \"\",\n    author: \"\",\n    synopsis: \"\",\n    search: \"\"\n  };\n\n  componentDidMount() {\n    this.loadBooks();\n  }\n\n  loadBooks = () => {\n    API.getBooks()\n      .then(res => {\n        this.setState({ books: res.data })\n        console.log('Look Here',res.data)\n      })\n      .catch(err => console.log(err));\n  };\n\n  deleteBook = id => {\n    API.deleteBook(id)\n      .then(res => this.loadBooks())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    event.preventDefault();\n    this.setState({ search: event.target.value });\n  };\n  // handleInputChange = event => {\n  //   const { name, value } = event.target;\n  //   this.setState({\n  //     [name]: value\n  //   });\n  // };\n\n  handleFormSubmit = event => {\n    event.preventDefault(); \n    API.getBooks(this.state.search)\n    .then(res => {\n      \n      this.setState({ results: res.data });\n    })\n    .catch(err => this.setState({ error: err.message }));\n\n    // if (this.state.title && this.state.author) {\n    //   API.saveBook({\n    //     title: this.state.title,\n    //     author: this.state.author,\n    //     synopsis: this.state.synopsis\n    //   })\n    //     .then(res => this.loadBooks())\n    //     .catch(err => console.log(err));\n    // }\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                value={this.state.search}\n                onChange={this.handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n              <Input\n                value={this.state.author}\n                onChange={this.handleInputChange}\n                name=\"author\"\n                placeholder=\"Author\"\n              />\n              <TextArea\n                value={this.state.synopsis}\n                onChange={this.handleInputChange}\n                name=\"synopsis\"\n                placeholder=\"Synopsis\"\n              />\n              <FormBtn\n                // disabled={!(this.state.author && this.state.title)}\n                onClick={this.handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {this.state.books.length ? (\n              <List>\n                {this.state.books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => this.deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Books;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Books from './pages/Books';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}